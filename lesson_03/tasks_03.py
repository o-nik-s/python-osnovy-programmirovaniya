# task_03_01 - Площадь треугольника

# Даны длины сторон треугольника. Вычислите площадь треугольника.

# Формула Герона:
# S = √p(p - a)(p - b)(p - c), где
# p = (a + b + c)/2

a = float(input())
b = float(input())
c = float(input())
epsilon = 5 * 10**-7

p = (a + b + c) / 2
S = (p * (p - a) * (p - b) * (p - c)) ** (1/2)

if abs(S - round(S, 5)) < epsilon:
    print(S)
else:
    print('{0:.6f}'.format(S))


# task_03_02 - Сумма ряда

# По данному числу n вычислите сумму 1+(1 / 2²)+(1 / 3²)+...+(1 / n²).

n = int(input())
epsilon = 5 * 10**-7

sumSquare = 0
i = 1
while i <= n:
    sumSquare += 1 / i ** 2
    i += 1
# print(sumSquare)

if abs(sumSquare - round(sumSquare, 5)) < epsilon:
    print(sumSquare)
else:
    print('{0:.6f}'.format(sumSquare))


# task_03_03 - Дробная часть

# Дано положительное действительное число X. Выведите его дробную часть.

X = float(input())
epsilon = 5 * 10**-10

x = X % 1
n = 0
while abs(x*10**n - round(x*10**n)) > epsilon*10**n:
    n += 1  # Примерно необходимое количество знаков после запятой
fl = round(x*10**n)
print(fl/10**n)


# task_03_04 - Цена товара

# Цена товара обозначена в рублях с точностью до копеек, то есть
# действительным числом с двумя цифрами после десятичной точки. Запишите
# в две целочисленные переменные стоимость товара в виде целого числа рублей
# и целого числа копеек и выведитеих на экран. При решении этой задачи нельзя
# пользоваться условными инструкциями и циклами.

price = float(input())
wholePrice = 0
fractPrice = 0

wholePrice = round(price // 1)
fractPrice = round((price - wholePrice) * 100)
print(wholePrice, fractPrice)


# task_03_05 - Округление по российским правилам

# По российский правилам числа округляются до ближайшего целого числа, а если
# дробная часть числа равна 0.5, то число округляется вверх. Дано
# неотрицательное число x, округлите его по этим правилам. Обратите внимание,
# что функция round не годится для этой задачи!

X = float(input())

x = X % 1
X = int(X // 1)
if x >= 0.5:
    X = X + 1
print(X)


# task_03_06 - Проценты

# Процентная ставка по вкладу составляет P процентов годовых, которые
# прибавляются к сумме вклада. Вклад составляет X рублей Y копеек. Определите
# размер вклада через год. При решении этой задачи нельзя пользоваться
# условными инструкциями и циклами.

P = int(input())
X = int(input())
Y = int(input())

Z = (X * 100 + Y) * (100 + P) / 100
print(int(Z / 100), int(Z % 100))


# task_03_07 - Сложные проценты

# Процентная ставка по вкладу составляет P процентов годовых, которые
# прибавляются к сумме вклада через год .Вклад составляет X рублей Y копеек.
# Определите размер вклада через K лет.

# Программа получает на вход целые числа P, X, Y, K.
# Программа должна вывести два числа: величину вклада через K лет в рублях
# и копейках. Дробное число копеек по истечение года отбрасывается. Перерасчет
# суммы вклада (с отбрасыванием дробных частей копеек) происходит ежегодно.

# import math

P = int(input())
X = int(input())
Y = int(input())
K = int(input())

Z = X * 100 + Y  # Все считаем в копейках
year = 1
while year <= K:
    Z = int(Z + Z * P / 100)  # Более точное вычисление
    year = year + 1
print(int(Z / 100), int(Z % 100))


# task_03_08 - Схема Горнера

# Дан многочлен P(x)=a[n] xⁿ+a[n₋₁] xⁿ⁻¹+...+a[₁] x+a[₀] и число x. Вычислите
# значение этого многочлена, воспользовавшись схемой Горнера.

# Сначала программе подается на вход целое неотрицательное число n≤20, затем
# действительное число x, затем следует n+1 вещественное число — коэффициенты
# многочлена от старшего к младшему.
# Программа должна вывести значение многочлена.
#
# Примечания:
# При решении этой задачи нельзя использовать массивы и операцию возведения
# в степень. Программа должна иметь сложность O(n).

n = int(input())
x = float(input())
i = 0
b = 0
epsilon = 5 * 10**-10
while i <= n:
    a = float(input())
    b = a + b * x
    d = b % 1
    k = 0
    while abs(d * 10 ** k - round(d * 10 ** k)) > epsilon * 10 ** k:
        k += 1  # Примерно необходимое количество знаков после запятой
    b = b // 1 + round(d * 10 ** k) / 10 ** k
    i += 1
print(b)


# task_03_09 - Стандартное отклонение

# Дана последовательность натуральных чисел x₁ x₂ ..., xn.
# Стандартным отклонением называется величина
# σ=sqrt(((((x₁-s)²+(x₂-s)²+…+(xn-s)²) / (n-1)))),
# где s = ((x₁+x₂+…+xn) / n) — среднее арифметическое последовательности,
# а sqrt - квадартный корень. Определите стандартное отклонение для данной
# последовательности натуральных чисел, завершающейся числом 0.

n = 0
x = int(input())
sumx = 0
sumx2 = 0
while x != 0:
    n += 1
    sumx += x
    sumx2 += x**2
    x = int(input())
mean = sumx / n
sigma = ((n * mean ** 2 - 2 * mean * sumx + sumx2) / (n - 1)) ** (1 / 2)
print(sigma)


# task_03_10 - Квадратное уравнение - 1

# Даны действительные коэффициенты a, b, c, при этом a != 0.
# Решите квадратное уравнение ax²+bx+c=0 и выведите все его корни.
#
# Вводятся три действительных числа.
#
# Если уравнение имеет два корня, выведите два корня в порядке возрастания,
# если один корень — выведите одно число, если нет корней — не выводите ничего.


a = float(input())
b = float(input())
c = float(input())

epsilon = 5 * 10**-25

D = b**2 - 4 * a * c
if abs(D) < epsilon:
    x = -b / (2 * a)
    print(x)
elif D > epsilon:
    sqrtD = D ** (1 / 2)
    x1 = (-b - sqrtD) / (2 * a)
    x2 = (-b + sqrtD) / (2 * a)
    if x1 <= x2:
        print(x1, x2)
    else:
        print(x2, x1)


# task_03_11 - Квадратное уравнение - 2

# Даны произвольные действительные коэффициенты a, b, c.
# Решите уравнение ax²+bx+c=0.
#
# Вводятся три действительных числа.
#
# Если данное уравнение не имеет корней, выведите число 0. Если уравнение
# имеет один корень, выведите число 1, а затем этот корень. Если уравнение
# имеет два корня, выведите число 2, а затем два корня в порядке возрастания.
# Если уравнениеимеет бесконечно много корней, выведите число 3.

a = float(input())
b = float(input())
c = float(input())

epsilon = 5 * 10**-25

if abs(a) < epsilon:
    if abs(b) < epsilon:
        if abs(c) < epsilon:
            print(3)
        else:
            print(0)
    else:
        x = -c / b
        print(1, x)
else:
    D = b ** 2 - 4 * a * c
    if abs(D) < epsilon:
        x = -b / (2 * a)
        print(1, x)
    elif D > epsilon:
        sqrtD = D ** (1 / 2)
        x1 = (-b - sqrtD) / (2 * a)
        x2 = (-b + sqrtD) / (2 * a)
        if x1 <= x2:
            print(2, x1, x2)
        else:
            print(2, x2, x1)
    else:
        print(0)


# task_03_12 - Система линейных уравнений - 1

# Даны вещественные числа a, b, c, d, e, f.
# Известно, что система линейных уравнений:
# ax + by = e
# cx + dy = f
# имеет ровно одно решение.
# Выведите два числа x и y, являющиеся решением этой системы.

a = float(input())
b = float(input())
c = float(input())
d = float(input())
e = float(input())
f = float(input())

x = (e * d - b * f) / (a * d - b * c)
y = (a * f - c * e) / (a * d - b * c)
print(x, y)


# task_03_13 - Система линейных уравнений - 2

# Даны вещественные числа a, b, c, d, e, f.
# Даны числа a, b, c, d, e, f. Решите систему линейных уравнений:
# ax + by = e
# cx + dy = f
# имеет ровно одно решение.
# Вводятся 6 чисел a, b, c, d, e, f -  коэффициенты уравнений.
#
# Вывод программы зависит от вида решения этой системы.
#
# Если система не имеет решений, то программа должна вывести единственное
# число 0.
# Если система имеет бесконечно много решений, каждое из которых имеет вид
# y=px+q, то программа должна вывести число 1, а затем значения p и q.
# Если система имеет единственное решение (x₀,y₀), то программа должна вывести
# число 2, а затем значения x₀ и y₀.
# Если система имеет бесконечно много решений вида x=x₀, y — любое, то
# программа должна вывести число 3, а затем значение x₀.
# Если система имеет бесконечно много решений вида y=y₀, x — любое, то
# программа должна вывести число 4, а затем значение y₀.
# Если любая пара чисел (x,y) является решением, то программа должна вывести
# число 5.

a = float(input())
b = float(input())
c = float(input())
d = float(input())
e = float(input())
f = float(input())

x = (e * d - b * f) / (a * d - b * c)
y = (a * f - c * e) / (a * d - b * c)
print(x, y)


# task_03_14 - Делаем срезы

# Дана строка.
#
# Сначала выведите третий символ этой строки.
# Во второй строке выведите предпоследний символ этой строки.
# В третьей строке выведите первые пять символов этой строки.
# В четвертой строке выведите всю строку, кроме последних двух символов.
# В пятой строке выведите все символы с четными индексами (считая, что
# индексация начинается с 0, поэтому символы выводятся начиная с первого).
# В шестой строке выведите все символы с нечетными индексами, то есть
# начиная со второго символа строки.
# В седьмой строке выведите все символы в обратном порядке.
# В восьмой строке выведите все символы строки через один в обратном порядке,
# начиная с последнего.
# В девятой строке выведите длину данной строки.

s = input()
print(s[2])
print(s[-2])
print(s[0:5])
print(s[:-2])
print(s[::2])
print(s[1::2])
print(s[::-1])
print(s[::-2])
print(len(s))


# task_03_15 - Первое и последнее вхождение

# Дана строка. Если в этой строке буква f встречается только один раз,
# выведите её индекс. Если она встречается два и более раз, выведите индекс
# её первого и последнего появления. Если буква f в данной строке
# не встречается, ничего не выводите. При решении этой задачи нельзя
# использовать метод count и циклы.

s = input()
pos1 = s.find('f')
pos2 = s[::-1].find('f')
if pos2 != -1:
    pos2 = len(s) - pos2 - 1
if pos1 == pos2 != -1:
    print(pos1)
elif pos1 < pos2:
    print(pos1, pos2)


# task_03_16 - Удаление фрагмента

# Дана строка, в которой буква h встречается минимум два раза. Удалите
# из этой строки первое и последнее вхождение буквы h, а также все символы,
# находящиеся между ними.

s = input()
pos1 = s.find('h')
pos2 = s[::-1].find('h')
pos2 = len(s) - pos2 - 1
news = s[:pos1]+s[pos2+1:]
print(news)


# task_03_17 - Дублирование фрагмента

# Дана строка, в которой буква h встречаетсякак минимум два раза. Повторите
# последовательность символов, заключенную между первым и последнием появлением
# буквы h два раза, сами буквы h повторять не надо.

s = input()
pos1 = s.find('h')
pos2 = s[::-1].find('h')
pos2 = len(s) - pos2 - 1
news = s[:pos2]+s[pos1+1:]
print(news)


# task_03_18 - Второе вхождение

# Дана строка. Найдите в этой строке второе вхождение буквы f, и выведите
# индекс этого вхождения. Если буква f в данной строке встречается только
# один раз, выведите число -1, а если не встречается ни разу, выведите
# число -2. При решении этой задачи нельзя использовать метод count.

s = input()
pos = s.find('f')
if pos == -1:
    print(-2)
else:
    pos = s.find('f', pos + 1)
    if pos == -1:
        print(-1)
    else:
        print(pos)


# task_03_19 - Переставить два слова

# Дана строка, состоящая ровно из двух слов, разделенных пробелом. Переставьте
# эти словаместами. Результат запишите в строку и выведите получившуюся строку.
# При решении этой задачи нельзя пользоваться циклами и инструкцией if.

s = input()
pos = s.find(' ')
print(s[pos+1:] + ' ' + s[:pos])


# task_03_20 - Количество слов

# Дана строка, состоящая из слов, разделенных пробелами. Определите,
# сколько в ней слов.

s = input()
print(s.count(" ") + 1)


# task_03_21 - Замена подстроки

# Дана строка. Замените в этой строке все цифры 1 на слово one.

s = input()
print(s.replace("1", "one"))


# task_03_22 - Удаление символа

# Дана строка. Удалите из этой строки все символы @.

s = input()
print(s.replace("@", ""))


# task_03_23 - Замена внутри фрагмента

# Дана строка. Замение в этой строке все появления буквы h на букву H,
# кроме первого и последнего вхождения.

s = input()
pos1 = s.find("h")
pos2 = s.rfind("h")
if pos1 >= -1 and pos2 >= -1 and pos1 != pos2:
    print(s[:pos1+1] + s[pos1+1:pos2].replace("h", "H") + s[pos2:])
else:
    print(s)


# task_03_24 - Вставка символов

# Дана строка. Получите новую строку, вставив между двумя символами
# исходной строки символ *. Выведите полученную строку.

s = input()
news = s[0]
i = 1
while i <= len(s) - 1:
    news = news + "*" + s[i]
    i += 1
print(news)


# task_03_25 - Удалить каждый третий символ

# Дана строка. Удалите из нее все символы, чьи индексы делятся на 3.
# Символы строки нумеруются, начиная с нуля.
#
# Ввод и вывод осуществлять с помощью файлов

s = input()
news = ""
i = 0
while i <= len(s) - 1:
    if i % 3 != 0:
        news += s[i]
    i += 1
print(news)
