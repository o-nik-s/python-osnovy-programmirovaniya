# task_05_01 - Ряд - 1

# Даны два целых числа A и B (при этом A≤B).
# Выведите все числа от A до B включительно.

A = int(input())
B = int(input())
for i in range(A, B + 1):
    print(i, end=" ")


# task_05_02 - Ряд - 2

# Даны два целых числа A и В. Выведите все числа от A до B включительно,
# в порядке возрастания, если A < B, или в порядке убывания в противном случае.

A = int(input())
B = int(input())
if A <= B:
    for i in range(A, B + 1):
        print(i)
else:
    for i in range(A, B - 1, -1):
        print(i)


# task_05_03 - Ряд - 3

# Дано натуральное число n. Напечатайте все n-значные нечетные
# натуральные числа в порядке убывания.

n = int(input())
for i in range(10**n - 1, 10**(n-1) - 1, -2):
    print(i, end=" ")


# task_05_04 - Сумма квадратов

# По данному натуральном n вычислите сумму 1²+2²+3²+...+n².

n = int(input())
sum2 = 0
for i in range(1, n+1):
    sum2 += i**2
print(sum2)


# task_05_05 - Флаги

# Напишите программу, которая по данному числу n от 1 до 9 выводит на экран
# n флагов. Изображение одного флага имеет размер 4×4 символов, между двумя
# соседними флагами также имеется пустой (из пробелов) столбец. Разрешается
# вывести пустой столбец после последнего флага. Внутри каждого флага должен
# быть записан его номер — число от 1 до n.


n = int(input())
print("+___ " * n)
for i in range(1, n + 1):
    print("|", i, ' /', sep="", end=' ')
print()
print("|__\\ " * n)
print("|    " * n)

'''
+___ +___ +___
|1 / |2 / |3 /
|__\ |__\ |__\
|    |    |
'''


# task_05_06 - Количество нулей

# Дано несколько чисел. Подсчитайте, сколько из них равны нулю,
# и выведите это количество.
#
# Cначала вводится число N, затем вводится ровно N целых чисел.
# Выведите ответ на задачу.

N = int(input())
count = 0
for i in range(1, N + 1):
    if int(input()) == 0:
        count += 1
print(count)


# task_05_07 - Лесенка

# По данному натуральному n≤9 выведите лесенку из n ступенек,
# i-я ступенька состоит из чисел от 1 до i без пробелов.
#
# Вводится натуральное число.
# Выведите ответ на задачу.

n = int(input())
for i in range(1, n + 1):
    for j in range(1, i + 1):
        print(j, "", sep="", end="")
    print()


# task_05_08 - Замечательные числа - 1

# Найдите и выведите все двузначные числа, которые равны удвоенному
# произведению своих цифр.

for i in range(11, 100):
    if 2 * (i // 10) * (i % 10) == i:
        print(i, end=" ")


# task_05_09 - Диофантово уравнение - 2

# Даны числа a, b, c, d, e. Подсчитайте количество таких целых чисел
# от 0 до 1000, которые являются корнями уравнения (ax³+bx²+cx+d)/(x-e)=0,
# и выведите их количество.


def IsRoot(a, b, c, d, e, x):
    if x - e == 0:
        return False
    elif (a*x**3 + b*x**2 + c*x + d)/(x-e) == 0:
        return True
    else:
        return False

a = int(input())
b = int(input())
c = int(input())
d = int(input())
e = int(input())

count = 0
for x in range(0, 1001):
    count += IsRoot(a, b, c, d, e, x)
print(count)


# task_05_10 - Сумма факториалов

# По данному натуральном n вычислите сумму 1!+2!+3!+...+n!.
# В решении этой задачи можно использовать только один цикл.


n = int(input())
sumF = 0
F = 1
for i in range(1, n + 1):
    F *= i
    sumF += F
print(sumF)


# task_05_11 - Потерянная карточка

# Для настольной игры используются карточки с номерами от 1 до N.
# Одна карточка потерялась. Найдите ее, зная номера оставшихся карточек.

# Дано число N, далее N-1 номер оставшихся карточек (различные числа
# от 1 до N).
# Программа должна вывести номер потерянной карточки.


N = int(input())
sumN = 0
# myTuple = ()
for i in range(0, N - 1):
    n = int(input())
#    myTuple += (n,)
    sumN += n
print(N*(N+1)//2 - sumN)


# task_05_12 - Замечательные числа - 4

# Даны два четырёхзначных числа A и B. Выведите все четырёхзначные числа
# на отрезке от A до B, запись которых является палиндромом.


def palindrom4(x):
    return str(x)[:2] == str(x)[:-3:-1]

A = int(input())
B = int(input())

for i in range(A, B + 1):
    if palindrom4(i):
        print(i)


# task_05_13 - Четные индексы

'''Выведите все элементы списка с четными индексами
(то есть A[0], A[2], A[4], ...).
Программа должна быть эффективной и не выполнять лишних действий!

Вводится список чисел. Все числа списка находятся на одной строке.
Выведите ответ на задачу.'''

numList = list(map(int, input().split()))
print(*[numList[i] for i in range(len(numList)) if i % 2 == 0])


# task_05_14 - Четные элементы

'''Выведите все четные элементы списка.

Вводится список чисел. Все числа списка находятся на одной строке.
Выведите ответ на задачу.'''

numList = list(map(int, input().split()))
print(*[numList[i] for i in range(len(numList)) if numList[i] % 2 == 0])


# task_05_15 - Количество положительных

# Найдите количество положительных элементов в данном списке.

numList = list(map(int, input().split()))
print(len([numList[i] for i in range(len(numList)) if numList[i] > 0]))


# task_05_16 - Последний максимум

'''Найдите наибольшее значение в списке и индекс последнего элемента,
который имеет данное значение за один проход по списку, не модифицируя
этот список и не используя дополнительного списка.'''

numList = list(map(int, input().split()))
max = numList[0]
maxIndx = 0
for i in range(1, len(numList)):
    if numList[i] >= max:
        max = numList[i]
        maxIndx = i
print(max, maxIndx)


# task_05_17 - Больше предыдущего

# Дан список чисел. Выведите все элементы списка, которые больше предыдущего
# элемента.

numList = list(map(int, input().split()))
print(*[numList[i] for i in range(1, len(numList))
        if numList[i] > numList[i - 1]])


# task_05_18 - Возрастает ли список?

'''Дан список. Определите, является ли он монотонно возрастающим (то есть
верно ли, что каждый элемент этого списка больше предыдущего). Выведите YES,
если массив монотонно возрастает и NO в противном случае. Решение оформите
в виде функции IsAscending(A). В данной функции должен быть один цикл while,
не содержащий вложенных условий и циклов — используйте схему
линейного поиска.'''


def IsAscending(A):
    i = 1
    flag = True
    while i <= len(A)-1:
        flag *= (A[i] > A[i - 1])
        i += 1
    return flag


A = list(map(int, input().split()))
print(IsAscending(A)*"YES" + (1 - IsAscending(A))*"NO")


# task_05_19 - Соседи одного знака

'''Дан список чисел. Если в нем есть два соседних элемента одного знака,
выведите эти числа. Если соседних элементов одного знака нет - не выводите
ничего. Если таких пар соседей несколько - выведите первую пару.'''

numList = list(map(int, input().split()))
flag = False
for i in range(1, len(numList)):
    if not(flag) and numList[i] * numList[i-1] >= 0:
        print(numList[i-1], numList[i])
        flag = True


# task_05_20 - Больше своих соседей

# Дан список чисел. Определите, сколько в этом списке элементов, которые
# больше двух своих соседей и выведите количество таких элементов.

numList = list(map(int, input().split()))
print(len([numList[i] for i in range(1, len(numList) - 1)
           if numList[i - 1] < numList[i] and numList[i] > numList[i + 1]]))


# task_05_21 - Наибольший элемент

'''Дан список чисел. Выведите значение наибольшего элемента в списке, а затем
индекс этого элемента в списке. Если наибольших элементов несколько, выведите
индекс первого из них.'''

numList = list(map(int, input().split()))
max = numList[0]
maxIndx = 0
for i in range(1, len(numList)):
    if numList[i] > max:
        max = numList[i]
        maxIndx = i
print(max, maxIndx)


# task_05_22 - Наименьший положительный

'''Выведите значение наименьшего из всех положительных элементов в списке.
Известно, что в списке есть хотя бы один положительный элемент, а значения
всех элементов списка по модулю не превосходят 1000.'''

numList = list(map(int, input().split()))
min = 1000
for i in range(1, len(numList)):
    if 0 < numList[i] < min:
        min = numList[i]
print(min)


# task_05_23 -  Наименьший нечетный

# Выведите значение наименьшего нечетного элемента списка,
# гарантируется, что хотя бы один нечётный элемент в списке есть.

numList = list(map(int, input().split()))
min = ""
for i in range(len(numList)):
    if numList[i] % 2 == 1:
        if min == "":
            min = numList[i]
        elif numList[i] < min:
            min = numList[i]
print(min)


# task_05_24 -  Вывести в обратном порядке

# Выведите элементы данного списка в обратном порядке, не изменяя сам список.

numList = list(input().split())
print(*[' '.join(numList[::-1])])


# task_05_25 - Переставить в обратном порядке

'''Переставьте элементы данного списка в обратном порядке, затем выведите
элементы полученного списка. Эта задача отличается от предыдущей тем, что вам
нужно изменить значения элементов самого списка, поменяв местами
A[0] c A[n-1], A[1] с A[n-2], а затем вывести элементы списка подряд.'''

numList = list(input().split())
numList = [' '.join(numList[::-1])]
print(*numList)


# task_05_26 - Удалить элемент

# Дан список из чисел и индекс элемента в списке k. Удалите из списка элемент
# с индексом k, сдвинув влево все элементы, стоящие правее элемента
# с индексом k.
#
# Программа получает на вход список, затем число k. Программа сдвигает
# все элементы, а после этого удаляет последний элемент списка при помощи
# метода pop().
#
# Программа должна осуществлять сдвиг непосредственно в списке, а не делать это
# при выводе элементов. Также нельзя использовать дополнительный список.

lst = input().split()
k = int(input())

for i in range(k, len(lst)-1):
    lst[i] = lst[i+1]
lst.pop()
print(' '.join(map(str, lst)))


# task_05_27 - Вставить элемент

# Дан список целых чисел, число k и значение C. Необходимо вставить в список
# на позицию с индексом k элемент, равный C, сдвинув все элементы, имевшие
# индекс не менее k, вправо.
#
# Поскольку при этом количество элементов в списке увеличивается, после
# считывания списка в его конец нужно будет добавить новый элемент, используя
# метод append.
#
# Вставку необходимо осуществлять уже в считанном списке, не делая этого при
# выводе и не создавая дополнительного списка.

lst = list(map(int, input().split()))
k, C = list(map(int, input().split()))

lst.append(0)
for i in range(len(lst)-1, k, -1):
    lst[i] = lst[i-1]
lst[k] = C
print(' '.join(map(str, lst)))


# task_05_28 - Ближайшее число

# Напишите программу, которая находит в массиве элемент, самый близкий
# по величине к данному числу.

# В первой строке задается одно натуральное число N, не превосходящее 1000 –
# размер массива. Во второй строке содержатся N чисел – элементы массива
# (целые числа, не превосходящие по модулю 1000). В третьей строке вводится
# одно целое число x, не превосходящее по модулю 1000.

# Вывести значение элемента массива, ближайшее к x. Если таких чисел
# несколько, выведите любое из них.


N = int(input())
numList = list(map(int, input().split()))
x = int(input())
min = numList[0]
for y in numList:
    if abs(x - y) < abs(x - min):
        min = y
print(min)


# task_05_29 - Шеренга

# Петя перешёл в другую школу. На уроке физкультуры ему понадобилось
# определить своё место в строю. Помогите ему это сделать.
#
# Программа получает на вход невозрастающую последовательность натуральных
# чисел, означающих рост каждого человека в строю. После этого вводится
# число X – рост Пети.Все числа во входных данных натуральные
# и не превышают 200.
#
# Выведите номер, под которым Петя должен встать в строй. Если в строю есть
# люди с одинаковым ростом, таким же, как у Пети, то он должен встать
# после них.

heightList = list(map(int, input().split()))
height = int(input())

# ................................


# task_05_30 - Количество различных элементов

# Дан список, упорядоченный по неубыванию элементов в нем. Определите,
# сколько в нем различных элементов.

numList = list(map(int, input().split()))
count = 1
current = numList[0]
for num in numList:
    if current != num:
        count += 1
        current = num
print(count)


# task_05_31 - Переставить соседние

# Переставьте соседние элементы списка (A[0] c A[1], A[2] c A[3] и т.д.).
# Если элементов нечетное число, то последний элемент остается на своем месте.

numList = list(map(int, input().split()))
end = (len(numList) // 2) * 2
if end != len(numList):
    end -= 1
for i in range(0, end, 2):
    numList[i], numList[i+1] = numList[i+1], numList[i]
print(' '.join(map(str, numList)))


# task_05_32 - Циклический сдвиг вправо

# Циклически сдвиньте элементы списка вправо (A[0] переходит на место A[1],
# A[1] на место A[2], ..., последний элемент переходит на место A[0]).
# Используйте минимально возможное количество операций присваивания.

numList = list(map(int, input().split()))
numList.append(0)
# numList = [numList[i-1] for i in range(len(numList)-1, 0, -1)] Разворачивает
for i in range(len(numList) - 1, 0, -1):
    numList[i] = numList[i - 1]
numList[0] = numList[len(numList) - 1]
numList.pop()
print(*numList)


# task_05_33 - Переставить min и max

# В списке все элементы различны. Поменяйте местами минимальный и максимальный
# элементы этого списка.


numList = list(map(int, input().split()))
# minim = min(numList)
# maxim = max(numList)
# minInd = numList.index(minim)
# maxInd = numList.index(maxim)
min, minInd, max, maxInd = numList[0], 0, numList[0], 0
for i in range(1, len(numList)):
    if numList[i] < min:
        min = numList[i]
        minInd = i
    elif numList[i] > max:
        max = numList[i]
        maxInd = i
numList[minInd], numList[maxInd] = numList[maxInd], numList[minInd]
print(" ".join(map(str, numList)))


# task_05_34 - Наибольшее произведение двух

# Дан список, заполненный произвольными целыми числами. Найдите в этом списке
# два числа, произведение которых максимально. Выведите эти числа в порядке
# неубывания.
#
# Решение должно иметь сложность O(n), где n - размер списка.

numList = list(map(int, input().split()))
# negative number - отрицательное число, positive number - положительное число
# negMin1, negMin2, posMax1, posMax2 = 0, 0, 0, 0
min1, min2, max1, max2 = 0, 0, 0, 0
for num in numList:
    if num <= min1:
        min1, min2 = num, min1
    elif min1 <= num <= min2:
        min2 = num
    elif num >= max2:
        max1, max2 = max2, num
    elif max1 <= num <= max2:
        max1 = num
if min1 * min2 <= max1 * max2:
    print(max1, max2)
else:
    print(min1, min2)


# task_05_35 - Наибольшее произведение трех чисел

# В данном списке из n≤10⁵ целых чисел найдите три числа, произведение
# которых максимально.
# Решение должно иметь сложность O(n), где n - размер списка.
# Выведите три искомых числа в любом порядке.
# ....................................................


# task_05_36 - Количество совпадающих пар

# Дан список чисел. Посчитайте, сколько в нем пар элементов, равных друг
# другу. Считается, что любые два элемента, равные друг другу образуют
# одну пару, которую необходимо посчитать.

numList = list(map(int, input().split()))
count = 0
for i in range(len(numList)):
    count += numList.count(numList[i])-1
count //= 2
print(count)


# task_05_37 - Уникальные элементы

# Дан список. Выведите те его элементы, которые встречаются в списке только
# один раз. Элементы нужно выводить в том порядке, в котором они встречаются
# в списке.

numList = list(map(int, input().split()))
checked = set()
for i in range(len(numList)):
    num = numList[i]
    if num not in checked:
        tail = numList[i+1:]
        if num not in tail:
            print(num, end=" ")
        checked.add(num)


# task_05_38 - Кегельбан

# N кеглей выставили в один ряд, занумеровав их слева направо числами от 1
# до N. Затем по этому ряду бросили K шаров, при этом i-й шар сбил все кегли
# с номерами от lᵢ до rᵢ включительно. Определите, какие кегли остались стоять
# на месте.
#
# Программа получает на вход количество кеглей N и количество бросков K. Далее
# идет K пар чисел lᵢ, rᵢ, при этом 1 ≤ lᵢ ≤ rᵢ ≤ N ≤ 100.
#
# Программа должна вывести последовательность из N символов, где j-й
# символесть “I”, если j-я кегля осталась стоять, или “.”, если j-я кегля
# была сбита.

N, r = map(int, input().split())
kegList = ["I" for i in range(N)]
for i in range(r):
    l, r = map(int, input().split())
    for j in range(l, r+1):
        kegList[j-1] = "."
print(''.join(kegList))


# task_05_39 - Ферзи

# Известно, что на доске 8×8 можно расставить 8 ферзей так, чтобы они не били
# друг друга. Вам дана расстановка 8 ферзей на доске, определите, есть ли
# среди них пара бьющих друг друга.
#
# Программа получает на вход восемь пар чисел, каждое число от 1 до 8 -
# координаты 8 ферзей.
#
# Если ферзи не бьют друг друга, выведите слово NO, иначе выведите YES.

n = 8
Queen = [[0 for i in range(2)] for j in range(n)]
for i in range(n):
    Queen[i][0], Queen[i][1] = map(int, input().split())
# print(Queen)
flag = True
while flag:
    for i in range(n):
        for j in range(i+1, n):
            diff1 = Queen[i][0] - Queen[j][0]
            diff2 = Queen[i][1] - Queen[j][1]
            if diff1 == 0 or diff2 == 0 or abs(diff1) == abs(diff2):
                flag = False
                break
    else:
        break
print((1 - flag) * "YES" + flag * "NO")


# task_05_40 - Сжатие списка

# Дан список целых чисел. Требуется “сжать” его, переместив все ненулевые
# элементы в левую часть списка, не меняя их порядок, а все нули - в правую
# часть. Порядок ненулевых элементов изменять нельзя, дополнительный список
# использовать нельзя, задачу нужно выполнить за один проход по списку.
# Распечатайте полученный список.


numList = list(map(int, input().split()))
length = len(numList)
i = 0
while i <= len(numList) - 1:
    if numList[i] == 0:
        del numList[i]
        # numList.pop(i)
        i -= 1
    i += 1
for i in range(len(numList), length):
    numList.append(0)
print(" ".join(map(str, numList)))


# task_05_41 - Самое частое число

# Дан список. Не изменяя его и не используя дополнительные списки, определите,
# какое число в этом списке встречается чаще всего. Если таких чисел
# несколько, выведите любое из них.

numList = list(map(int, input().split()))
n = numList[0]
count = numList.count(n)
for i in range(1, len(numList)):
    ni = numList[i]
    if ni != n:
        counti = numList.count(ni)
        if counti > count:
            n = ni
            count = counti
print(n)
