# Пример решения задачи в функциональном стиле

# У нас есть n людей, они разъезжаются с какого-нибудь праздника,
# и для каждого известно количество километров, сколько километров ему нужно проехать до дома.
# А также у нас есть n такси, причем стоимость поездки за один километр в разных такси разная.
# Требуется сопоставить каждому человеку определенную машину такси, так, чтобы суммарное количество
# потраченных денег было минимально.

# Вывести нужно в этой задаче данные в таком порядке. Мы для каждого человека, в том порядке,
# как они перечислялись, должны вывести номер такси, в том порядке, как они перечислялись.

# Давайте начнем писать, пока что используя переменные, но с таким ограничением: никаких if,
# никаких циклов, ничего. То есть только одна длинная линейная программа пока что с сохранением людей.

pas = map(int, input().split())  # Расстояния поездок
sortedPas = sorted(enumerate(pas), key = lambda x: x[1])
# enumerate возвращает список кортежей: на нулевом месте - номер; на первом месте - значение из списка
print(sortedPas)
taxi = map(int, input().split())  # Стоимость такси
sortedTaxi = sorted(enumerate(taxi), key = lambda x: x[1], reverse=True) # Разворачиваем в обратном порядке
print(sortedTaxi)
# Теперь нужно сопоставить такси и людей
# Для сопоставления есть функция zip
# zip берет несколько последовательностей, поочередно достает из них элементы и объединяет их в кортеж
print(*zip(sortedPas, sortedTaxi))
# Вывело n кортежей, каждый их которых состоит из двух кортежей
ans = zip(sortedPas, sortedTaxi)
# Теперь нужно посортировать по номерам людей, и для каждого человека вывести номер машины
sortedAns = sorted(ans, key=lambda x: x[0][0]) # Ключ - номер человека
print(*map(lambda x: x[1][0] + 1, sortedAns)) # map для того, чтобы достать номер такси
# Для нумерации с единицы в lambda-функции прибавляем единицу

# Перепишем программу в чисто функциональном стиле
print(
    *map(
        lambda x:
            x[1][0] + 1,
            sorted(
                zip(
                    sorted(
                        enumerate(
                            map(
                                int,
                                input().split()
                            )
                        ),
                        key=lambda x:
                            x[1]
                    ),
                    sorted(
                        enumerate(
                            map(
                                int,
                                input().split()
                            )
                        ),
                        key=lambda x:
                            x[1],
                            reverse=True
                    )
                ),
                key=lambda x:
                    x[0][0]
            )
    )
)


