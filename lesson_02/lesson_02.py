# Неделя 2


# Логический тип данных и операции
print("Логический тип данных и операции")

# Строки также могут сравниваться между собой.
# При этом сравнение происходит в лексикографическом порядке
# (как упорядочены слова в словаре).

# Среди логических операций наивысший приоритет имеет операция not,
# затем идет and и наименьший приоритет имеет операция or.

# Проверим число на четность
n = int(input())
isEven = n % 2 == 0
print(isEven)


# Примеры использования логических выражений
print("Примеры использования логических выражений")

# Проверим, пересекаются ли события (отрезки времени)
start1 = int(input())
finish1 = int(input())
start2 = int(input())
finish2 = int(input())
# Пересекаются, если начало или конец одного из них находится внутри другого
isS1in2 = start2 <= start1 <= finish2
# Несколько сравнений в Питоне проверяются последовательно
isF1in2 = start2 <= finish1 <= finish2
isS2in1 = start1 <= start2 <= finish1
isF2in1 = start1 <= finish2 <= finish1

answer = isS1in2 or isF1in2 or isS2in1 or isF2in1
print(answer)

# Можно подумать и переформулировать.
# Начало первого отрезка меньше или равно чем конец второго.
# И одновременно с этим начало второго меньше или равно чем конец первого.
answer = start1 <= finish2 and start2 <= finish1
print(answer)


# Условный оператор
print("Условный оператор")

x = int(input())
if x < 0:
    x = - x  # Отступом выделяется только та часть кода, которая будет относиться к if
print(x)


# Последовательность проверки логических условий

# Логические выражения не всегда считаются полностью от начала и до конца.
# А как только становится понятен результат подсчета логического выражения,
# дальнейшие подсчеты полностью прекращаются.

if x < 0 and x // 0 == 0:
    # Если x неотрицателен, то проверяется только первое условие,
    # и поскольку false, то дальше не заходим /как с and так и с or/.
    # Это нужно, когжа делем на переменную, которая может равняться нулю.
    # Проверяем, не равна ли нулю, а потом можно делить.
    x = - x
    print(x)


if x >= 0:
    print(x)
else: # Пишется с тем же отступом, что и if, к которому он относится
    print(-x)
# Стандартный отступ - это четыре пробела


# Если после if записано не логическое выражение, то оно будет приведено к логическому,
# как если бы от него была вызвана функция bool. Однако, злоупотреблять этим не следует,
# т.к. это ухудшает читаемость кода.
#
# Для подсчета модуля числа в Питоне существует функция abs, которая избавляет от необходимости
# каждый раз писать подсчет модуля вручную.
#
# В Питоне, как и во многих других языках программирования, если результат вычисления выражения
# однозначно понятен по уже вычисленной части, то оставшаяся часть выражения даже не считается.
# Например, выражение True or 5 // 0 == 42, не будет вызывать ошибки деления на ноль,
# т.к. по левой части выражения (True) уже понятно, что результат его вычисления также будет True
# и арифметическое выражение в правой части даже не будет вычисляться.


print()
print('############################################################################')
############################################################################
print()


# Вложенный условный оператор
print("Вложенный условный оператор")

x = int(input())
y = int(input())

if x >= 0:
    if y >= 0:
        print(1)
    else:
        print(4)
else:
    if y > 0:
        print(2)
    else:
        print(3)


# Конструкция 'иначе-если'
print("Конструкция 'иначе-если'")

x = int(input())

if x == 1:
    print("One")
else:
    if x == 2:
        print("Two")
    else:
        if x == 3:
            print("Three")
        else:
            print("Other")

if x == 1:
    print("One")
elif x == 2:
    print("Two")
elif x == 3:
    print("Three")
else:
    print("Other")


a = int(input())
b = int(input())
(a, b) = (b, a)  # Обмен значений переменных
print(a, b)


print()
print('############################################################################')
############################################################################
print()


# Цикл while
print("Цикл while")


i = 1
while i <= 100:
    print(i, end = ' ')
    i = i + 1
print('!')


# Найти максимальное число в последовательности

# Мы не знаем, сколько в последовательности будет чисел. Знаем, что если ноль
# - последовательность заканчивается. Найти максимальное число в последовательности.

now = int(input())
maxNum = now
while now != 0:
    now = int(input())
    if now == 0:
        break # выходим из цикла, break должен находиться внутри if, иначе бессмысленен
    if now > maxNum:
        maxNum = now
print(maxNum)


now = int(input())
maxNum = now
while now != 0:
    now = int(input())
    if now != 0 and now > maxNum:
        maxNum = now
else:
    print('Окончание ввода')
print(maxNum)


# В языке Питон к циклу while можно написать блок else. Команды в этом блоке
# будут выполняться, если цикл завершил свою работу нормальным образом (т.е.
# условие в какой-то момент перестало быть истинным) и не будут выполняться
# только в случае, если выход из цикла произошел с помощью команды break.


print()
print('############################################################################')
############################################################################
print()


# Подсчет суммы и оператор continue
print("Подсчет суммы и оператор continue")

# Найти сумму последовательности

# Мы не знаем, сколько в последовательности будет чисел. Знаем, что если ноль
# - последовательность заканчивается. Найти максимальное число в последовательности.

sumSeq = 0
now = int(input())
while now != 0:
    sumSeq += now # +=, -=, *=, **=
    now = int(input())
print(sumSeq)
print()


# Требуется вывести только положительные числа
sumSeq = 0
now = int(input())
while now != 0:
    if now > 0:
        print(now)
    now = int(input())
print()


# continue выполняет цикл с нового шага
# Т.е. проверяем новое условие
# В отличие от break, который вырубает цикл полностью

now = -1
while now != 0:
    now = int(input())
    if now <= 0:
        continue
    print(now)
print()
