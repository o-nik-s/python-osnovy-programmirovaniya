# Работа с файлами

# Чтение до конца ввода

# Часто информация хранится в виде текстовых файлов

# Итак, мы хотим открыть текстовый файл

fin = open('input_lesson_06.txt', "r", encoding='utf-8') # r - режим, в котором будем открывать; encoding - кодировка
a = fin.readline() # Считать строку до перевода строки
b = fin.readline()
print(a + b)

# Чтение до конца ввода

# Часто информация хранится в виде текстовых файлов

# Итак, мы хотим открыть текстовый файл

fin = open('input_lesson_06.txt', "r", encoding='utf-8') # r - режим, в котором будем открывать; encoding - кодировка
# a = fin.readline() # Считать строку до перевода строки
# b = fin.readline()
# print(a + b)
a = int(fin.readline())
b = int(fin.readline())
print(a + b)

# readline() - аналогг функции input(), предназначенный для чтения из файла

# Можно сделать чтение вообще всех строк, которые содержатся в файле, и положить их в список
fin = open('input_lesson_06.txt', "r", encoding='utf-8') # r - режим, в котором будем открывать; encoding - кодировка
lines = fin.readlines()
print(lines)
# При чтении с помощью readlines() попадает символ перевода строоки
# Для решения данной проблемы можно использовать метод strip() для строк
# strip() обрезает все пробельные символы в начале и конце (пробелы, табуляци, переводы строк)
print(lines[0].strip(), lines[1].strip())

# Метод reaflines считывает все строки в память. И если файл был очень большой, то память будет забиваться,
# а иногда может кончиться
# Если нужно обрабатывать строки по одной, можно сделать
for line in fin:
    print(int(line) + 1)
# В памяти весь файл храниться не будет, будет просто доставаться по одной строке из памяти

a = fin.read() # Все содержимое файла записывается в одну строку
print(a)

# Можно так же печатать в файл
fout = open('output.txt', 'w', encoding='utf-8')  # "a" - дописать в конец файла!
print(sum(map(int, fin.readlines())), file=fout)
# Если файла не было, то он создатся автоматически
# Если файл был, то все пропадет и запишется новое

# На самом деле в ОС запись в файл происходит не сразу. Оно постепенно накапливается в буфере
# и сбрасывается время от времени. Это сделано для скорости.
# Чтобы оно точно сбросилось, нужно закрыто файл.
fout.close()

# Таким образом, Вы можете читать из файла и писать в файл.
# В тестирующей системе поддерживается работа с файлами input.txt и output.txt или с консоли.
# Ну и научились считывать неопределенное количество данных, которые могут быть записаны по одному в строке, например.


'''Расммотрим простой пример: считать все строки файла input.txt и вывести каждую строку развернутой в файл output.txt:'''
inFile = open('input.txt', 'r', encoding='utf8')
outFile = open('output.txt', 'w', encoding='utf8')
lines = inFile.readlines()
for line in lines:
    print(line[-2::-1], file=outFile)
inFile.close()
outFile.close()
'''Для открытия файла используется функция open, принимающая два параметра: имя файла и режим открытия 
(''r'' для чтения и ''w'' для записи), а также именованный параметр encoding (значение кодировки ''utf8'' 
подходит для большинства современных текстовых файлов). Эта функция возвращает ссылку на объект типа файл.'''

'''Для чтения всех строк из файла используется метод readlines, который возвращает список всех строк 
(в смысле lines) файла. Обратите внимание, что строки попадают в список вместе с символом перевода строки, 
в нашей программе это учитывается при создании среза (этот символ последний в строке).'''

'''Для печати в файл мы пользуемся стандартной функцией print, которой передается именованный параметр file 
с указанием, в какой файл печатать.
После окончания работы с файлами нужно вызвать для них методы close.'''

'''В этой задаче, на самом деле, можно было обойтись без запоминания всего файла в памяти (это особенно 
актуально для больших файлов). Решение без запоминания всего файла можно было реализовать так:'''
inFile = open('input.txt', 'r', encoding='utf8')
outFile = open('output.txt', 'w', encoding='utf8')
for line in inFile:
    print(line[-2::-1], file=outFile)
inFile.close()
outFile.close()

'''Переменные типа файл являются iterable и умеют возвращать очередную строку из файла, не храня его целиком в памяти.'''

'''Также существует метод read, который позволяет считать все содержимое файла в одну строковую переменную (при этом 
содержащую в себе переводы строки \n).'''

'''В принципе, читать до конца ввода можно и из консоли. Для этого нужно подключить библиотеку sys и использовать 
определенный в ней файловый дескриптор stdin в качестве файла. Ввести признак конца файла в консоли можно
 нажав Ctrl+Z в Windows или Ctrl+D в Unix-системах. В среде программирования такой способ может не работать.'''
